Mapper App

Overview
This project is a location-based Android application that allows users to add and view locations on Google Maps. The app uses Firebase Authentication for user management, Room Database for storing location data, and Google Maps API for map functionality. The app also features basic CRUD operations for locations and integrates analytics with MPAndroidChart.

Features
- Add Locations: Users can add locations by clicking the "Add Location" button. The location will be saved to the Room database and displayed on the map.
- Map Display: Locations are displayed on a Google Map with markers for each added location.
- Database Storage: All location data is stored in Room Database for persistence.
- User Authentication: Firebase Authentication is used for secure user registration and login.
- Analytics: MPAndroidChart is integrated to visualize analytics (optional feature for future development).

Technologies Used
- Java 11: Programming language used for app development.
- Android SDK: For building the Android application.
- Room Database: For local data storage of locations.
- Google Maps API: For displaying the map and adding markers for locations.
- Firebase Authentication: For secure user authentication.
- MPAndroidChart: For displaying charts (optional feature for analytics).

Installation

Prerequisites
Before you begin, ensure you have the following installed:
- Android Studio (for Android development)
- JDK 11 or higher (for Java compatibility)
- Google Maps API Key

Steps to Run the App
1. Clone the repository:
   ```bash
   git clone https://github.com/your-username/mapper.git

2. Open the project in Android Studio.

3. Add your Google Maps API Key in strings.xml:
<string name="google_maps_key" translatable="false">YOUR_API_KEY</string>

4. Sync the project with Gradle files.
5. Build and run the app on an emulator or device.

Approach

Step 1: Setting up the Android Project
I started by setting up the Android project and configuring it with the required SDKs and dependencies.
I integrated Firebase for user authentication and Room Database for storing location data.

Step 2: Implementing the Google Maps API
I added Google Maps functionality by configuring the API in the AndroidManifest.xml and creating a SupportMapFragment in the layout.
In the MainActivity, I initialized the map, set up a listener for the map, and added a default location marker.

Step 3: Creating the Room Database
I created a LocationEntity class to represent the location data (latitude, longitude, and name).
A DAO (LocationDao) was created to define the database operations (insert, query, etc.).
The data was stored in the Room Database, and the map was updated with the locations stored in the database.

Step 4: Adding User Authentication
I integrated Firebase Authentication to handle user registration and login.
The app ensures that only authenticated users can add and view locations.

Step 5: Analytics (Optional)
I integrated MPAndroidChart to add analytics features (optional for future development).

Future Enhancements
Improve UI/UX: I plan to improve the user interface by adding more features like search functionality for locations and a better layout design.
Add Analytics: Integration of MPAndroidChart can be expanded for more detailed analytics related to location data.
Push Notifications: I plan to add push notifications using Firebase Cloud Messaging (FCM) to alert users about new updates or locations added.

Conclusion 
This project demonstrates how to integrate Google Maps, Firebase, and Room Database in an Android app. 
The app allows users to add, view, and manage locations on a map, and it serves as a foundation for building more advanced location-based services.
